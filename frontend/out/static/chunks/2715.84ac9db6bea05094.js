"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2715],{92715:function(e,t,n){n.r(t),n.d(t,{OpenloginAdapter:function(){return _},getOpenloginDefaultOptions:function(){return S}});var i=n(69805),r=n(4942),o=n(95844),a=n(13631);function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const l={EIP155:"eip155",SOLANA:"solana"},h=s(s({},l),{},{MULTICHAIN:"multichain"}),p="776218ac4734478c90191dde8cae483c",d=(e,t)=>{const n=t?"number"===typeof t?t:parseInt(t,16):(e=>{if(e===l.EIP155)return 1;if(e===l.SOLANA)return 1;throw new Error("Chain namespace ".concat(e," is not supported"))})(e);return e===l.EIP155?(e=>{const t=l.EIP155;return 1===e?{chainNamespace:t,chainId:"0x1",rpcTarget:"https://mainnet.infura.io/v3/".concat(p),displayName:"Ethereum Mainnet",blockExplorer:"https://etherscan.io/",ticker:"ETH",tickerName:"Ethereum"}:3===e?{chainNamespace:t,chainId:"0x3",rpcTarget:"https://ropsten.infura.io/v3/".concat(p),displayName:"ropsten",blockExplorer:"https://ropsten.etherscan.io/",ticker:"ETH",tickerName:"Ethereum"}:4===e?{chainNamespace:t,chainId:"0x4",rpcTarget:"https://rinkeby.infura.io/v3/".concat(p),displayName:"rinkeby",blockExplorer:"https://rinkeby.etherscan.io/",ticker:"ETH",tickerName:"Ethereum"}:5===e?{chainNamespace:t,chainId:"0x5",rpcTarget:"https://goerli.infura.io/v3/".concat(p),displayName:"goerli",blockExplorer:"https://goerli.etherscan.io/",ticker:"ETH",tickerName:"Ethereum"}:42===e?{chainNamespace:t,chainId:"0x2a",rpcTarget:"https://kovan.infura.io/v3/".concat(p),displayName:"kovan",blockExplorer:"https://kovan.etherscan.io/",ticker:"ETH",tickerName:"Ethereum"}:137===e?{chainNamespace:t,rpcTarget:"https://polygon-rpc.com",blockExplorer:"https://polygonscan.com",chainId:"0x89",displayName:"Polygon Mainnet",ticker:"matic",tickerName:"matic"}:80001===e?{chainNamespace:t,rpcTarget:"https://rpc-mumbai.maticvigil.com",blockExplorer:"https://mumbai-explorer.matic.today",chainId:"0x13881",displayName:"Polygon Mumbai Testnet",ticker:"matic",tickerName:"matic"}:56===e?{chainNamespace:t,rpcTarget:"https://bsc-dataseed.binance.org",blockExplorer:"https://bscscan.com",chainId:"0x38",displayName:"Binance SmartChain Mainnet",ticker:"BNB",tickerName:"BNB"}:97===e?{chainNamespace:t,rpcTarget:"https://data-seed-prebsc-2-s3.binance.org:8545",blockExplorer:"https://testnet.bscscan.com",chainId:"0x61",displayName:"Binance SmartChain Testnet",ticker:"BNB",tickerName:"BNB"}:null})(n):e===l.SOLANA?(e=>{const t=l.SOLANA;return 1===e?{chainNamespace:t,blockExplorer:"https://explorer.solana.com",chainId:"0x1",displayName:"Solana Mainnet",rpcTarget:"https://api.mainnet-beta.solana.com",ticker:"SOL",tickerName:"Solana Token"}:2===e?{rpcTarget:"https://api.testnet.solana.com",blockExplorer:"https://explorer.solana.com?cluster=testnet",chainId:"0x2",chainNamespace:t,displayName:"testnet",ticker:"SOL",tickerName:"solana"}:3===e?{rpcTarget:"https://api.devnet.solana.com",blockExplorer:"https://explorer.solana.com?cluster=devnet",chainId:"0x3",chainNamespace:t,displayName:"devnet",ticker:"SOL",tickerName:"solana"}:null})(n):null};class u extends a.s{constructor(e,t){super(t),(0,r.Z)(this,"code",void 0),(0,r.Z)(this,"message",void 0),this.code=e,this.message=t||"",Object.defineProperty(this,"name",{value:"Web3AuthError"})}toJSON(){return{name:this.name,code:this.code,message:this.message}}toString(){return JSON.stringify(this.toJSON())}}class g extends u{constructor(e,t){super(e,t),Object.defineProperty(this,"name",{value:"WalletInitializationError"})}static fromCode(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new g(e,"".concat(g.messages[e],", ").concat(t))}static notFound(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5001,e)}static notInstalled(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5002,e)}static notReady(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5003,e)}static windowBlocked(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5004,e)}static windowClosed(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5005,e)}static incompatibleChainNameSpace(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5006,e)}static duplicateAdapterError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5007,e)}static invalidProviderConfigError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5008,e)}static providerNotReadyError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5009,e)}static rpcConnectionError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5010,e)}static invalidParams(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5011,e)}static invalidNetwork(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return g.fromCode(5013,e)}}(0,r.Z)(g,"messages",{5e3:"Custom",5001:"Wallet is not found",5002:"Wallet is not installed",5003:"Wallet is not ready yet",5004:"Wallet window is blocked",5005:"Wallet window has been closed by the user",5006:"Incompatible chain namespace provided",5007:"Adapter has already been included",5008:"Invalid provider Config",5009:"Provider is not ready yet",5010:"Failed to connect with rpc url",5011:"Invalid params passed in",5013:"Invalid network provided"});class m extends u{constructor(e,t){super(e,t),Object.defineProperty(this,"name",{value:"WalletLoginError"})}static fromCode(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new m(e,"".concat(m.messages[e]).concat(t))}static connectionError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return m.fromCode(5111,e)}static disconnectionError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return m.fromCode(5112,e)}static notConnectedError(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return m.fromCode(5113,e)}static popupClosed(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return m.fromCode(5114,e)}}function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function N(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}(0,r.Z)(m,"messages",{5e3:"Custom",5111:"Failed to connect with wallet",5112:"Failed to disconnect from wallet",5113:"Wallet is not connected",5114:"Wallet popup has been closed by the user"});const O={OPENLOGIN:"openlogin",WALLET_CONNECT_V1:"wallet-connect-v1",WALLET_CONNECT_V2:"wallet-connect-v2"},v=N({TORUS_SOLANA:"torus-solana",PHANTOM:"phantom"},O),E=N({TORUS_EVM:"torus-evm",METAMASK:"metamask"},O),y=N(N({},E),v);function C(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?C(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):C(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const w="in_app",P={NOT_READY:"not_ready",READY:"ready",CONNECTING:"connecting",CONNECTED:"connected",DISCONNECTED:"disconnected",ERRORED:"errored"},I=b(b({},P),{},{ADAPTER_DATA_UPDATED:"adapter_data_updated"});class k extends o.Ue{constructor(){super(...arguments),(0,r.Z)(this,"adapterData",{}),(0,r.Z)(this,"chainConfig",null)}get chainConfigProxy(){return this.chainConfig?b({},this.chainConfig):null}setChainConfig(e){if(this.status===P.READY)return;if(!e.chainNamespace)throw g.notReady("ChainNamespace is required while setting chainConfig");const t=d(e.chainNamespace,e.chainId);this.chainConfig=b(b({},t),e)}setAdapterSettings(e){}checkConnectionRequirements(){if(this.name!==y.WALLET_CONNECT_V1||this.status!==P.CONNECTING){if(this.status===P.CONNECTING)throw g.notReady("Already connecting");if(this.status===P.CONNECTED)throw m.connectionError("Already connected");if(this.status!==P.READY)throw m.connectionError("Wallet adapter is not ready yet")}}checkInitializationRequirements(){if(this.status!==P.NOT_READY){if(this.status===P.CONNECTED)throw g.notReady("Already connected");if(this.status===P.READY)throw g.notReady("Adapter is already initialized")}}updateAdapterData(e){this.adapterData=e,this.emit(I.ADAPTER_DATA_UPDATED,{adapterName:this.name,data:e})}}var T=n(72378),A=n.n(T),D=n(2043),j=n.n(D);const S=(e,t)=>({adapterSettings:{network:i.dr.MAINNET,clientId:"",uxMode:i.$e.POPUP},chainConfig:e?d(e,t):void 0,loginSettings:{relogin:!0}});function R(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?R(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):R(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}class _ extends k{constructor(e){var t,n,o;super(),(0,r.Z)(this,"name",y.OPENLOGIN),(0,r.Z)(this,"adapterNamespace",h.MULTICHAIN),(0,r.Z)(this,"type",w),(0,r.Z)(this,"openloginInstance",null),(0,r.Z)(this,"status",P.NOT_READY),(0,r.Z)(this,"currentChainNamespace",l.EIP155),(0,r.Z)(this,"openloginOptions",void 0),(0,r.Z)(this,"loginSettings",{}),(0,r.Z)(this,"privKeyProvider",null),j().debug("const openlogin adapter",e);const a=S(null===(t=e.chainConfig)||void 0===t?void 0:t.chainNamespace,null===(n=e.chainConfig)||void 0===n?void 0:n.chainId);if(this.openloginOptions=x(x({clientId:"",network:i.dr.MAINNET},a.adapterSettings),e.adapterSettings||{}),this.loginSettings=x(x({},a.loginSettings),e.loginSettings),null!==(o=e.chainConfig)&&void 0!==o&&o.chainNamespace){var c;this.currentChainNamespace=null===(c=e.chainConfig)||void 0===c?void 0:c.chainNamespace;const t=a.chainConfig?a.chainConfig:{};if(this.chainConfig=x(x({},t),null===e||void 0===e?void 0:e.chainConfig),j().debug("const openlogin chainConfig",this.chainConfig),!this.chainConfig.rpcTarget)throw g.invalidParams("rpcTarget is required in chainConfig")}}get chainConfigProxy(){return this.chainConfig?x({},this.chainConfig):null}get provider(){var e;return(null===(e=this.privKeyProvider)||void 0===e?void 0:e.provider)||null}set provider(e){throw new Error("Not implemented")}async init(e){var t;if(super.checkInitializationRequirements(),null===(t=this.openloginOptions)||void 0===t||!t.clientId)throw g.invalidParams("clientId is required before openlogin's initialization");if(!this.chainConfig)throw g.invalidParams("chainConfig is required before initialization");this.openloginInstance=new i.ZP(this.openloginOptions);const n=(0,i.Gv)();let r=!0;Object.keys(n).length>0&&n.result&&(r=!0),await this.openloginInstance.init(),this.status=P.READY,this.emit(I.READY,y.OPENLOGIN);try{this.openloginInstance.privKey&&(e.autoConnect||r)&&await this.connect()}catch(o){j().error("Failed to connect with cached openlogin provider",o),this.emit("ERRORED",o)}}async connect(e){super.checkConnectionRequirements(),this.status=P.CONNECTING,this.emit(I.CONNECTING,x(x({},e),{},{adapter:y.OPENLOGIN}));try{return await this.connectWithProvider(e),this.provider}catch(t){if(j().error("Failed to connect with openlogin provider",t),this.status=P.READY,this.emit(I.ERRORED,t),null!==t&&void 0!==t&&t.message.includes("user closed popup"))throw m.popupClosed();throw m.connectionError("Failed to login with openlogin")}}async disconnect(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(this.status!==P.CONNECTED)throw m.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw g.notReady("openloginInstance is not ready");await this.openloginInstance.logout(),e.cleanup?(this.status=P.NOT_READY,this.openloginInstance=null,this.privKeyProvider=null):this.status=P.READY,this.emit(I.DISCONNECTED)}async getUserInfo(){if(this.status!==P.CONNECTED)throw m.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw g.notReady("openloginInstance is not ready");return await this.openloginInstance.getUserInfo()}setAdapterSettings(e){if(this.status===P.READY)return;const t=S();this.openloginOptions=x(x(x({},t.adapterSettings),this.openloginOptions||{}),e)}setChainConfig(e){super.setChainConfig(e),this.currentChainNamespace=e.chainNamespace}async connectWithProvider(e){if(!this.chainConfig)throw g.invalidParams("chainConfig is required before initialization");if(!this.openloginInstance)throw g.notReady("openloginInstance is not ready");if(this.currentChainNamespace===l.SOLANA){const{SolanaPrivateKeyProvider:e}=await Promise.all([n.e(3662),n.e(8766),n.e(1010),n.e(108),n.e(1989),n.e(8535)]).then(n.bind(n,25941));this.privKeyProvider=new e({config:{chainConfig:this.chainConfig}})}else{if(this.currentChainNamespace!==l.EIP155)throw new Error("Invalid chainNamespace: ".concat(this.currentChainNamespace," found while connecting to wallet"));{const{EthereumPrivateKeyProvider:e}=await Promise.all([n.e(3662),n.e(3482),n.e(1010),n.e(1627),n.e(6514)]).then(n.bind(n,91627));this.privKeyProvider=new e({config:{chainConfig:this.chainConfig}})}}!this.openloginInstance.privKey&&e&&await this.openloginInstance.login(A()(this.loginSettings,{loginProvider:e.loginProvider},{extraLoginOptions:{login_hint:null===e||void 0===e?void 0:e.login_hint}}));let t=this.openloginInstance.privKey;if(t){if(this.currentChainNamespace===l.SOLANA){const{getED25519Key:e}=await Promise.all([n.e(108),n.e(5418)]).then(n.bind(n,33946));t=e(t).sk.toString("hex")}await this.privKeyProvider.setupProvider(t),this.status=P.CONNECTED,this.emit(I.CONNECTED,{adapter:y.OPENLOGIN,reconnected:!e})}}}}}]);